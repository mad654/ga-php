#!/usr/bin/env php

<?php

$root = realpath(__DIR__ . '/../');
require "$root/vendor/autoload.php";

use Bramus\Monolog\Formatter\ColoredLineFormatter;
use Bramus\Monolog\Formatter\ColorSchemes\DefaultScheme;
use Monolog\Logger;
use Psr\Log\LoggerInterface;
use Symfony\Component\Console\Application;

function main($root) {
    configureRequiredEnv($root);
    $appName = getenv('APP_NAME');
    $loggers = configureLogging($root, $appName);

    $app = new Application();
    $app->setName($appName);
    $app->addCommands(getCommands($root, $loggers));
    $app->run();
}

/**
 *
 * Wrapped in function to deny access on $app
 * and other environment
 *
 * @param string $root root directory
 * @param LoggerInterface[] $loggers
 * @return \Symfony\Component\Console\Command\Command[]
 */
function getCommands($root, $loggers) {
    $commands = include "$root/etc/commands.inc.php";
    return $commands;
}

/**
 * @param string $root
 */
function configureRequiredEnv($root) {
    $config = new Dotenv\Dotenv("$root/etc", 'config');
    $config->load();
    $config->required('APP_NAME');

    include "$root/etc/config_requirements.inc.php";
}

/**
 * @param string $root
 * @param string $name
 * @return Logger
 */
function configureLogging($root, $name) {
    $logDir = getenv('APP_LOG_DIR');
    $logName = strtoupper(str_replace(' ', '_', $name)) . '.DEFAULT';
    $logFileName = strtolower(str_replace(' ', '_', $name));

    $logger = createConsoleLogger($logName);

    if (!file_exists($logDir)) {
        $logger->notice('Create log directory: {d}', [ 'd' => $logDir ]);
        mkdir ($logDir, 0750, true);
    }

    $logger->info('Configure logging base on {f}', [ 'f' => "$root/etc/logging.inc.php"]);
    $loggers = include "$root/etc/logging.inc.php";
    $logger->info('Logger configured');

    return $loggers;
}

/**
 * @param $logName
 * @return Logger
 */
function createConsoleLogger($logName)
{
    $logger = new Logger($logName);
    $logger->pushHandler(
        new \Monolog\Handler\FingersCrossedHandler(
            (new \Monolog\Handler\StreamHandler('php://stdout', getenv('APP_LOG_LEVEL')))
                ->setFormatter(new ColoredLineFormatter(new DefaultScheme())),
            null,
            getenv('APP_LOG_BUFFER')
        )
    );

    return $logger;
}

main($root);
